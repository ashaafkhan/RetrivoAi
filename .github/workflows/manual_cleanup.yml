name: Manual AWS Cleanup

on:
  workflow_dispatch:  # Triggered manually via GitHub UI
    inputs:
      environment:
        description: 'Environment to clean resources'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
permissions:
  id-token: write
  contents: read

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project_name: ${{ steps.read-vars.outputs.project_name }}
      aws_region: ${{ steps.read-vars.outputs.aws_region }}
    steps:
      - uses: actions/checkout@v4
        
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          else
          echo "environment=dev" >> $GITHUB_OUTPUT
          fi
                        
      - id: read-vars
        run: |
          # Determine environment to use
          ENV="${{ steps.set-env.outputs.environment }}"
          echo "Using environment: $ENV"
            
          # Extract project_name and aws_region from terraform.tfvars
          if [ -f "environments/$ENV/terraform.tfvars" ]; then
          PROJECT_NAME=$(grep project_name environments/$ENV/terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
          AWS_REGION=$(grep aws_region environments/$ENV/terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
          else
          echo "Warning: terraform.tfvars file not found for environment $ENV"
          fi
            
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
                    
  cleanup:
    runs-on: ubuntu-latest
    needs: [determine_environment]
    env:
      PROJECT_NAME: ${{ needs.determine_environment.outputs.project_name }}
      STAGE: ${{ needs.determine_environment.outputs.environment }}
      AWS_REGION: ${{ needs.determine_environment.outputs.aws_region }}
      AUTO_CONFIRM: true  # Enables auto-approval for destructive actions
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.determine_environment.outputs.aws_region }}
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure AWS CLI is available
        run: |
          aws --version || (echo "AWS CLI not found!" && exit 1)

      - name: Make Cleanup Script Executable
        run: chmod +x ./scripts/cleanup.sh

      - name: Run AWS Cleanup Script
        run: ./scripts/cleanup.sh
        timeout-minutes: 30  # Allow more time for cleanup to complete